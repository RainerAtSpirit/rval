(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./docs_source/0_introduction/20_objects-and-factories.mdx":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return d});var n=a("./node_modules/react/index.js"),o=a.n(n),r=a("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function c(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t){return!t||"object"!==s(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=i(this,l(t).call(this,e))).layout=null,a}var a,n,s;return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,o.a.Component),a=t,(n=[{key:"render",value:function(){var e=this.props,t=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:t},o.a.createElement(r.MDXTag,{name:"h1",components:t,props:{id:"working-with-objects-and-arrays"}},"Working with objects and arrays"),o.a.createElement(r.MDXTag,{name:"p",components:t},"So far we only used stand-alone reactive values to capture our state.\nBut in real world applications we will need complex objects or state trees.\nBut suprisingly, RVal however doesn't offer a primitive to work with objects or array.\nInstead:"),o.a.createElement(r.MDXTag,{name:"p",components:t},o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"consider every object or array as an immutable collection of reactive values")),o.a.createElement(r.MDXTag,{name:"p",components:t},"By keeping objects and arrays themself immutable, it turns out that the mental model remains much simpler,\nand the API surface that is needed to apply reactivity is much",o.a.createElement(r.MDXTag,{name:"sup",components:t,parentName:"p",props:{id:"fnref-1"}},o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"sup",props:{href:"#fn-1",className:"footnote-ref"}},"1"))," smaller."),o.a.createElement(r.MDXTag,{name:"p",components:t},"But, that doesn't RVal is awkward of inconvenient when working with objects.\nInstead, it turns out that using objects, which are structurally immutable, but contain stateful reactive values, are presently convenient to work with."),o.a.createElement(r.MDXTag,{name:"p",components:t},"Let's start a bit simple with an object that captures the state of a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"Todo")," item (with apologies for the uninspired example):"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const title = val('Get coffee')\nconst done = val(false)\n\nconst myFirstTodo = {\n  title,\n  done,\n}\n\ntitle.done(true)\nconsole.log(title.done())\n")),o.a.createElement(r.MDXTag,{name:"p",components:t},"Pretty straight forward eh? Note that we used only ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"const")," values, and that ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"myFirstTodo")," itself should be treated as an immutable objects to keep the conceptuel model simple.\n(In fact, it would be recommended to use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"Object.freeze(myFirstTodo)"),", but it turns out that RVal will take care of that as well in most cases, as we will discover later)."),o.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"a-first-object-factory"}},"A first object factory"),o.a.createElement(r.MDXTag,{name:"p",components:t},"Probably you don't want to create multiple todo's in your application, intead of one.\nTo ease that process we can make a ",o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"factory")," funtion:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'function createTodo(initialTitle) {\n  const title = val(initialTitle)\n  const done = val(false)\n  return {\n    title,\n    done,\n  }\n}\n\nconst myFirstTodo = createTodo("Get coffee")\nmyFirstTodo.done(true)\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"Ok, that was easy! But our factory function can do more than just instating some reactive values and combining them into an object.\nWe can add define derived data using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"drv"),", and actions using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"act"),", and make them part of the object as well:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'function createTodo(initialTitle) {\n    const title = val(initialTitle)\n    const done = val(false)\n    const asMarkdown(() => done() ? " * [x] ~" + title() + "~" : " * [ ] " +title())\n    const toggle = act(() {\n        done(!done())\n    })\n\n    return {\n        title, done, toggle, asMarkdown\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"So, we now have a factory that creates an immutable object, containing some reactive values, derivations and actions.\nNote that we are only creating ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"const"),"s in these listing, and we neatly avoided using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"this"),", which might save some headaches down the road!",o.a.createElement(r.MDXTag,{name:"sup",components:t,parentName:"p",props:{id:"fnref-2"}},o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"sup",props:{href:"#fn-2",className:"footnote-ref"}},"2"))),o.a.createElement(r.MDXTag,{name:"p",components:t},"Let's put our code to the test and create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"sub")," to observe the effects of our state updates:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'const myFirstTodo = createTodo("Get coffee")\nsub(myFirstTodo.asMarkdown, md => {\n    console.log(md)\n}\n\nmyFirstTodo.title("Get coffee and cookie")\n// Prints: * [ ] Get coffee and cookie\n\nmyFirstTodo.toggle()\n// Prints: * [x] ~Get coffee and cookie~\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"Yeah, our first factory is a fact!"),o.a.createElement(r.MDXTag,{name:"p",components:t},o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"Tip: When starting with RVal, it will take mere seconds before you will forget parenthesis for the first and write ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"if (todo.done) ...")," instead of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"if (todo.done())"),". So be smart. Or, use TypeScript so that you don't have be (Granted, TypeScript won't catch all of those mistakes, but hopefully enough to learn the right habits).")," "),o.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"creating-collections"}},"Creating collections"),o.a.createElement(r.MDXTag,{name:"p",components:t},"At this point you might be wondering, ok, you tricked me with objects. But how do I organize a collection of todo items, with just using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"val"),".\nThe answer is: we'll repeat the same trick.\nLet's quickly design a factory for a \"todoStore\":"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'function createTodoStore() {\n    const todos = val([])\n\n    function addTodo(title) {\n        todos([\n            ...todos(),\n            createTodo(title)\n        ])\n    }\n\n    return { todos, addTodo }\n}\n\nconst store = createTodoStore()\nstore.addTodo("Go for a walk")\nconsole.log(tore.todos().map(todo => todo.title())) // prints: ["Go for a walk"]\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"See what we did there? We introduced a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"val")," to maintain our collection of todos, but the value we assign to it/ read from it, we still consider it as immutable!\nSo, we always replace the entire collection. But, we recycle all the contents, so it isn't too involved. "),o.a.createElement(r.MDXTag,{name:"p",components:t},"When using RVal, the recommended approach is to always produces those trees that are immutable themselves, but have stateful reactive values inside them, which always store an completely immutable, but possibly stateful value."),o.a.createElement(r.MDXTag,{name:"p",components:t},"In fact, by default RVal will help you with that; it will automatically deeply freeze any value you store in ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"val"),"!\nThis makes sure that an error will be thrown if you accidentally write something that would otherwise mutate the contents, like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},'store.todos().push(createTodo("Go for a walk))'),".\nThis way of organizing could be expressed as: using ",o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"immutable, but stateful objects"),"."),o.a.createElement(r.MDXTag,{name:"p",components:t},"So that is why in the above function ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"addTodo"),", a completely new array is passed to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"todos(x)")," as new value, a value that is based on the current value of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"todos()"),"."),o.a.createElement(r.MDXTag,{name:"p",components:t},o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"Note: that this approach doesn't suffer too much needing to write complicated deep updates, because a deep update is just reads until you arrive at the location for the update. You don't have to produce an entire new state tree. For example this is a valid \"deep update\": ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"store.todos()[0].done(true)"))),o.a.createElement(r.MDXTag,{name:"p",components:t},o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"Tip: The autofreeze behavior can be disabled for performance reasons, by using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"configure({ autoFreeze: false })"),".")),o.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"simplifying-updates-with-updaters"}},"Simplifying updates with updaters"),o.a.createElement(r.MDXTag,{name:"p",components:t},"It is quite common that updates depend on a previous value.\nWe saw this for example when we tried to toggle our ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"todo")," status:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'import { val } from "@r-val/core"\n\nconst done = val(false)\ndone(!done()) // toggles to true\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"To simply these kind of updates, it is also possible to pass a function as new value to a reactive value.\nThis function receives as current argument the current value, and should return the new value to be stored.\nThis function is called once, and it's output will be the name state.\nWith that we can rewrite the above as:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'import { val } from "@r-val/core"\n\nconst done = val(false)\ndone(v => !v)\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"It turns out that many of these update functions are very similar.\nThe most common update functions are gathered in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"@r-val/updaters")," package.\nFor example, for toggling a boolean we can use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"toggle")," updater, and rewrite the above as:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'import { val } from "@r-val/core"\nimport { toggle } from "@r-val/updaters"\n\nconst done = val(false)\ndone(toggle)\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"More complicated patterns are supported as well. For example, we can rewrite the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"addTodo")," function shown above from:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"function addTodo(title) {\n    todos([\n        ...todos(),\n        createTodo(title)\n    ])\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:t},"To:"),o.a.createElement(r.MDXTag,{name:"pre",components:t},o.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},'import { push } from "@r-val/updaters"\n\nfunction addTodo(title) {\n    todos(push(createTodo(title)))\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:t},"Note that the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"push")," updater takes an argument itself, to describe which item(s) should be pushed to the array.\nThis holds for many updaters. For example ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"inc")," (to increment), ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"set"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"splice")," and many of the other updaters\nto manipulate objects or arrays take arguments as well."),o.a.createElement(r.MDXTag,{name:"p",components:t},"You'll find it is pretty trivial to write your own updater function (feel free to ",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/mweststrate/rval/compare"}},"PR"),"!).\nBut here is the extensive list all ",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"#/api/updaters"}},"updaters"),"."),o.a.createElement(r.MDXTag,{name:"p",components:t},o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"p"},"Tip: You might be wondering, if any function that is passed as value to a reactive value is called, how do I store function ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"fn")," in reactive value ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"x"),"? The answer is simple: just pass a function that produces ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"fn"),". So instead of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"x(fn)")," use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"x(() => fn)"),". Or you can use the built-in updater ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"replace")," to achieve the same: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"em"},"x(replace(fn))"),".")," "),o.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"next-steps"}},"Next steps"),o.a.createElement(r.MDXTag,{name:"p",components:t},"TODO: fix links"),o.a.createElement(r.MDXTag,{name:"p",components:t},"This page covered the basics of working with objects and collections in RVal.\nTo dive a bit deeper, you might want to check these sections out later:"),o.a.createElement(r.MDXTag,{name:"ul",components:t},o.a.createElement(r.MDXTag,{name:"li",components:t,parentName:"ul"},"Using models to simplify and reduce the boilerplate of writing factories"),o.a.createElement(r.MDXTag,{name:"li",components:t,parentName:"ul"},"Best practices for structuring state")),o.a.createElement(r.MDXTag,{name:"p",components:t},"But first we'll see how we can combine RVal with React, so that we can finally put some fanciness on the screen."),o.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"background-what-about-classes"}},"Background: what about classes?"),o.a.createElement(r.MDXTag,{name:"p",components:t},"You might be wondering whether it is possible to use classes instead of factory functions.\nThe answer is, yes that is perfectly possible.\nThe reason for the chose approach in this documentation however, is that it hopefully set's you up for the ",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://medium.com/@ricomariani/the-pit-of-success-cfefc6cb64c8"}},"Pit of Success"),".\nOnce you get used to this approach, there should be less places where you can accidentally error, you can't forget to bind a function,\nand the mental model becomes really trivial: Nothing should or can't be modified. Except ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"val"),"s."),o.a.createElement(r.MDXTag,{name:"p",components:t},"That being said, in an existing codebase it might be easier to start with introducing reactive values at certain places and keep the rest as is.\nIf you are using TypeScript, it is highly recommended to use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"readonly")," keyword when ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"val")," as classfield: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"readonly done = val(false)"),".\nThis will protect you against accidental reassignments of the field."),o.a.createElement(r.MDXTag,{name:"p",components:t},"For further inspiration, checkout the ",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/mweststrate/rval/blob/c12d30ce7d43326fd062e59366902e14794eeed3/pkgs/core/tests/object.spec.ts#L100-L135"}},"prototype based example")," or ",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/mweststrate/rval/blob/c12d30ce7d43326fd062e59366902e14794eeed3/pkgs/core/tests/object.spec.ts#L187-L220"}},"class based example"),"."),o.a.createElement(r.MDXTag,{name:"div",components:t,props:{className:"footnotes"}},o.a.createElement(r.MDXTag,{name:"hr",components:t,parentName:"div"}),o.a.createElement(r.MDXTag,{name:"ol",components:t,parentName:"div"},o.a.createElement(r.MDXTag,{name:"li",components:t,parentName:"ol",props:{id:"fn-1"}},"In MobX, roughly 75% of the code base is dealing with decorators, making plain data structures observable and dealing with the various different ways that people have to work with objects.",o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"li",props:{href:"#fnref-1",className:"footnote-backref"}},"\u21a9")),o.a.createElement(r.MDXTag,{name:"li",components:t,parentName:"ol",props:{id:"fn-2"}},"For ",o.a.createElement(r.MDXTag,{name:"em",components:t,parentName:"li"},"super")," performance critical applications (measure before optimizing!), one could use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"li"},"Object.create")," and store all methods on the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"li"},"prototype"),". Those methods would then rely on using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"li"},"this"),', but it would avoid creating a closure for each method on each instance. See also the two examples linked in the "Using classes" section.',o.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"li",props:{href:"#fnref-2",className:"footnote-backref"}},"\u21a9")))))}}])&&c(a.prototype,n),s&&c(a,s),t}()}}]);
//# sourceMappingURL=docs-source-0-introduction-20-objects-and-factories.e2ac49079e2d157a0b49.js.map