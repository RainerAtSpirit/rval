{"version":3,"sources":["webpack:///./docs_source/0_introduction/20_objects-and-factories.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href","className"],"mappings":"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","file":"static/js/docs-source-0-introduction-20-objects-and-factories.0928d7eb.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"working-with-objects-and-arrays\"}}>{`Working with objects and arrays`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So far we only used stand-alone reactive values to capture our state.\nBut in real world applications we will need complex objects or state trees.\nBut suprisingly, RVal however doesn't offer a primitive to work with objects or array.\nInstead:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`consider every object or array as an immutable collection of reactive values`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`By keeping objects and arrays themself immutable, it turns out that the mental model remains much simpler,\nand the API surface that is needed to apply reactivity is much`}<MDXTag name=\"sup\" components={components} parentName=\"p\" props={{\"id\":\"fnref-1\"}}><MDXTag name=\"a\" components={components} parentName=\"sup\" props={{\"href\":\"#fn-1\",\"className\":\"footnote-ref\"}}>{`1`}</MDXTag></MDXTag>{` smaller.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But, that doesn't RVal is awkward of inconvenient when working with objects.\nInstead, it turns out that using objects, which are structurally immutable, but contain stateful reactive values, are presently convenient to work with.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's start a bit simple with an object that captures the state of a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` item (with apologies for the uninspired example):`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const title = val('Get coffee')\nconst done = val(false)\n\nconst myFirstTodo = {\n  title,\n  done,\n}\n\ntitle.done(true)\nconsole.log(title.done())\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pretty straight forward eh? Note that we used only `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const`}</MDXTag>{` values, and that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myFirstTodo`}</MDXTag>{` itself should be treated as an immutable objects to keep the conceptuel model simple.\n(In fact, it would be recommended to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.freeze(myFirstTodo)`}</MDXTag>{`, but it turns out that RVal will take care of that as well in most cases, as we will discover later).`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"a-first-object-factory\"}}>{`A first object factory`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Probably you don't want to create multiple todo's in your application, intead of one.\nTo ease that process we can make a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`factory`}</MDXTag>{` funtion:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function createTodo(initialTitle) {\n  const title = val(initialTitle)\n  const done = val(false)\n  return {\n    title,\n    done,\n  }\n}\n\nconst myFirstTodo = createTodo(\"Get coffee\")\nmyFirstTodo.done(true)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ok, that was easy! But our factory function can do more than just instating some reactive values and combining them into an object.\nWe can add define derived data using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`drv`}</MDXTag>{`, and actions using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`act`}</MDXTag>{`, and make them part of the object as well:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function createTodo(initialTitle) {\n    const title = val(initialTitle)\n    const done = val(false)\n    const asMarkdown(() => done() ? \" * [x] ~\" + title() + \"~\" : \" * [ ] \" +title())\n    const toggle = act(() {\n        done(!done())\n    })\n\n    return {\n        title, done, toggle, asMarkdown\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`So, we now have a factory that creates an immutable object, containing some reactive values, derivations and actions.\nNote that we are only creating `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const`}</MDXTag>{`s in these listing, and we neatly avoided using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this`}</MDXTag>{`, which might save some headaches down the road!`}<MDXTag name=\"sup\" components={components} parentName=\"p\" props={{\"id\":\"fnref-2\"}}><MDXTag name=\"a\" components={components} parentName=\"sup\" props={{\"href\":\"#fn-2\",\"className\":\"footnote-ref\"}}>{`2`}</MDXTag></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's put our code to the test and create a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sub`}</MDXTag>{` to observe the effects of our state updates:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const myFirstTodo = createTodo(\"Get coffee\")\nsub(myFirstTodo.asMarkdown, md => {\n    console.log(md)\n}\n\nmyFirstTodo.title(\"Get coffee and cookie\")\n// Prints: * [ ] Get coffee and cookie\n\nmyFirstTodo.toggle()\n// Prints: * [x] ~Get coffee and cookie~\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Yeah, our first factory is a fact!`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Tip: When starting with RVal, it will take mere seconds before you will forget parenthesis for the first and write `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`if (todo.done) ...`}</MDXTag>{` instead of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`if (todo.done())`}</MDXTag>{`. So be smart. Or, use TypeScript so that you don't have be (Granted, TypeScript won't catch all of those mistakes, but hopefully enough to learn the right habits).`}</MDXTag>{` `}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-collections\"}}>{`Creating collections`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`At this point you might be wondering, ok, you tricked me with objects. But how do I organize a collection of todo items, with just using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{`.\nThe answer is: we'll repeat the same trick.\nLet's quickly design a factory for a \"todoStore\":`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function createTodoStore() {\n    const todos = val([])\n\n    function addTodo(title) {\n        todos([\n            ...todos(),\n            createTodo(title)\n        ])\n    }\n\n    return { todos, addTodo }\n}\n\nconst store = createTodoStore()\nstore.addTodo(\"Go for a walk\")\nconsole.log(tore.todos().map(todo => todo.title())) // prints: [\"Go for a walk\"]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`See what we did there? We introduced a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{` to maintain our collection of todos, but the value we assign to it/ read from it, we still consider it as immutable!\nSo, we always replace the entire collection. But, we recycle all the contents, so it isn't too involved. `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When using RVal, the recommended approach is to always produces those trees that are immutable themselves, but have stateful reactive values inside them, which always store an completely immutable, but possibly stateful value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In fact, by default RVal will help you with that; it will automatically deeply freeze any value you store in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{`!\nThis makes sure that an error will be thrown if you accidentally write something that would otherwise mutate the contents, like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.todos().push(createTodo(\"Go for a walk))`}</MDXTag>{`.\nThis way of organizing could be expressed as: using `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`immutable, but stateful objects`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So that is why in the above function `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addTodo`}</MDXTag>{`, a completely new array is passed to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos(x)`}</MDXTag>{` as new value, a value that is based on the current value of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos()`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Note: that this approach doesn't suffer too much needing to write complicated deep updates, because a deep update is just reads until you arrive at the location for the update. You don't have to produce an entire new state tree. For example this is a valid \"deep update\": `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`store.todos()[0].done(true)`}</MDXTag></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Tip: The autofreeze behavior can be disabled for performance reasons, by using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`configure({ autoFreeze: false })`}</MDXTag>{`.`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"simplifying-updates-with-updaters\"}}>{`Simplifying updates with updaters`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It is quite common that updates depend on a previous value.\nWe saw this for example when we tried to toggle our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` status:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { val } from \"@r-val/core\"\n\nconst done = val(false)\ndone(!done()) // toggles to true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`To simply these kind of updates, it is also possible to pass a function as new value to a reactive value.\nThis function receives as current argument the current value, and should return the new value to be stored.\nThis function is called once, and it's output will be the name state.\nWith that we can rewrite the above as:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { val } from \"@r-val/core\"\n\nconst done = val(false)\ndone(v => !v)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`It turns out that many of these update functions are very similar.\nThe most common update functions are gathered in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`@r-val/updaters`}</MDXTag>{` package.\nFor example, for toggling a boolean we can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`toggle`}</MDXTag>{` updater, and rewrite the above as:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { val } from \"@r-val/core\"\nimport { toggle } from \"@r-val/updaters\"\n\nconst done = val(false)\ndone(toggle)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`More complicated patterns are supported as well. For example, we can rewrite the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addTodo`}</MDXTag>{` function shown above from:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function addTodo(title) {\n    todos([\n        ...todos(),\n        createTodo(title)\n    ])\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`To:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { push } from \"@r-val/updaters\"\n\nfunction addTodo(title) {\n    todos(push(createTodo(title)))\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{` updater takes an argument itself, to describe which item(s) should be pushed to the array.\nThis holds for many updaters. For example `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inc`}</MDXTag>{` (to increment), `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`set`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`splice`}</MDXTag>{` and many of the other updaters\nto manipulate objects or arrays take arguments as well.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You'll find it is pretty trivial to write your own updater function (feel free to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/mweststrate/rval/compare\"}}>{`PR`}</MDXTag>{`!).\nBut here is the extensive list all `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"#/api/updaters\"}}>{`updaters`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Tip: You might be wondering, if any function that is passed as value to a reactive value is called, how do I store function `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`fn`}</MDXTag>{` in reactive value `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`x`}</MDXTag>{`? The answer is simple: just pass a function that produces `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`fn`}</MDXTag>{`. So instead of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`x(fn)`}</MDXTag>{` use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`x(() => fn)`}</MDXTag>{`. Or you can use the built-in updater `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`replace`}</MDXTag>{` to achieve the same: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"em\">{`x(replace(fn))`}</MDXTag>{`.`}</MDXTag>{` `}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"next-steps\"}}>{`Next steps`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO: fix links`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This page covered the basics of working with objects and collections in RVal.\nTo dive a bit deeper, you might want to check these sections out later:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Using models to simplify and reduce the boilerplate of writing factories`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Best practices for structuring state`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But first we'll see how we can combine RVal with React, so that we can finally put some fanciness on the screen.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"background-what-about-classes\"}}>{`Background: what about classes?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You might be wondering whether it is possible to use classes instead of factory functions.\nThe answer is, yes that is perfectly possible.\nThe reason for the chose approach in this documentation however, is that it hopefully set's you up for the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.com/@ricomariani/the-pit-of-success-cfefc6cb64c8\"}}>{`Pit of Success`}</MDXTag>{`.\nOnce you get used to this approach, there should be less places where you can accidentally error, you can't forget to bind a function,\nand the mental model becomes really trivial: Nothing should or can't be modified. Except `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{`s.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That being said, in an existing codebase it might be easier to start with introducing reactive values at certain places and keep the rest as is.\nIf you are using TypeScript, it is highly recommended to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`readonly`}</MDXTag>{` keyword when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{` as classfield: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`readonly done = val(false)`}</MDXTag>{`.\nThis will protect you against accidental reassignments of the field.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For further inspiration, checkout the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/mweststrate/rval/blob/c12d30ce7d43326fd062e59366902e14794eeed3/pkgs/core/tests/object.spec.ts#L100-L135\"}}>{`prototype based example`}</MDXTag>{` or `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/mweststrate/rval/blob/c12d30ce7d43326fd062e59366902e14794eeed3/pkgs/core/tests/object.spec.ts#L187-L220\"}}>{`class based example`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"div\" components={components} props={{\"className\":\"footnotes\"}}>\n<MDXTag name=\"hr\" components={components} parentName=\"div\"></MDXTag>\n<MDXTag name=\"ol\" components={components} parentName=\"div\">\n<MDXTag name=\"li\" components={components} parentName=\"ol\" props={{\"id\":\"fn-1\"}}>{`In MobX, roughly 75% of the code base is dealing with decorators, making plain data structures observable and dealing with the various different ways that people have to work with objects.`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#fnref-1\",\"className\":\"footnote-backref\"}}>{`↩`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\" props={{\"id\":\"fn-2\"}}>{`For `}<MDXTag name=\"em\" components={components} parentName=\"li\">{`super`}</MDXTag>{` performance critical applications (measure before optimizing!), one could use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Object.create`}</MDXTag>{` and store all methods on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`prototype`}</MDXTag>{`. Those methods would then rely on using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`this`}</MDXTag>{`, but it would avoid creating a closure for each method on each instance. See also the two examples linked in the \"Using classes\" section.`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#fnref-2\",\"className\":\"footnote-backref\"}}>{`↩`}</MDXTag></MDXTag>\n</MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}