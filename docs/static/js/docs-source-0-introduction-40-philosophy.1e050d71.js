(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./docs_source/0_introduction/40_philosophy.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function c(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function i(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=i(this,l(n).call(this,e))).layout=null,a}var a,t,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"the-philosophy-of-rval"}},"The Philosophy of RVal"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Why reactive values? In essence most of our programming work consists of transfering in-memory information from one place to another, transforming the information into new information, that is either human or machine digestable.\nData tranformations always introduces reduces redundant copies of data that need to be kept in sync with the original data.\nIn very trivial example of this problem might look like:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'const user = {\n    firstName: "Jane",\n    lastName: "Stanford",\n    fullName: "Jane Stanford"\n}\n\ndocument.body.innerHTML = `<h1>Hello ${user.fullName}</h1>\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"This simple snippet introduces a redundant copy of the original user's name in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"fullName")," property, and in the DOM.\nNow it has become the programmers responsibility to make sure any futher changes to the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"user")," are propagated properly:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'function updateFirstName(newName) {\n    user.firstName = newName\n    user.fullName = user.firstName + " " + user.lastName\n    document.body.innerHTML = `<h1>Hello ${user.fullName}</h1>\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"This is the problem that any state management abstraction, regardless the framework or paradigm that is used, is trying to solve.\nRVal introduces a handful of primitives that help you to solve this problem in any context, by automating the question:\n",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"when")," should ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"which")," transformation be applied?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Here is a quick overview in how RVal helps solving that problem.\nFirst, we should recognize that imperatively computing new information, such as the DOM represantation, introduces stale values.\nHowever, we can avoid ever storing such information by storing ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"computations"),", rather than ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"values"),".\nThe process for that is as simple as creating a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"thunk")," (argumentless function) that capture the computation, rather than imperatively producing new values:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'const user = {\n    firstName: "Jane",\n    lastName: "Stanford",\n    fullName: () => user.firstName + " " + user.lastName\n}\n\nconst rendering = () => `<h1>Hello ${user.fullName()}</h1>`\n\ndocument.body.innerHTML = rendering()\n\nfunction updateFirstName(newName) {\n    user.firstName = newName\n    document.body.innerHTML = rendering()\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"We've made things slightly better now; we don't have to imperatively update ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"user.fullName")," anymore if the name changes.\nSimilarly, we could captured the rendered representation of the user in the thunk called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"rendering"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"By storing computations instead of values, we have reduced the amount of redundant information.\nHowever, we still have to make sure that our changes are propagated, for example by updating the DOM whenever we change the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"firstName")," property."),o.a.createElement(r.MDXTag,{name:"p",components:n},"But, what if we could ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"subscribe")," to our thunks? And thereby avoid the need to manually propagate state changes, and increasing decoupling in the process?\nIn other words, what if we could write something like:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"const user = { /* as-is */ }\nconst rendering = () => `<h1>Hello ${user.fullName()}</h1>`\n\non(rendering, () => {\n    document.body.innerHTML = rendering()\n})\n\nfunction updateFirstName(newName) {\n    user.firstName = newName\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Well, here is the good news: This is exactly the kind of things RVal allows you to write, by introducing three concepts:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"val(value)")," to create pieces of information that can change over time"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"drv(thunk)")," to create thunks that can be subscribed to"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"sub(something, listener)")," to create a listener that fires whenever the provided reactive value or thunk changes")),o.a.createElement(r.MDXTag,{name:"p",components:n},"With those concepts, we can rewrite our above listing as a combination of reactive values and thunks, that propagate the changes when needed!"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'import { val, drv, sub } from "rval"\n\nconst user = {\n    firstName: val("Jane"),\n    lastName: val("Stanford"),\n    fullName: drv(() => user.firstName() + " " + user.lastName())\n}\n\nconst rendering = drv(`<h1>Hello ${user.fullName()}</h1>`)\n\n// subscribe to the \'rendering\' thunk\nsub(rendering, () => {\n    document.body.innerHTML = rendering()\n})\n\nfunction updateFirstName(newName) {\n    // change the `firstName` reactive value to \'newName\'\n    // rval will make sure that any derivation and subscription impacted by this\n    // change will be re-evaluated (and nothing more).\n    user.firstName(newName)\n}\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"functions-solidify-state"}},"Functions solidify state"),o.a.createElement(r.MDXTag,{name:"p",components:n},'At this point you might be wondering:\n"But ',o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"why")," is it interesting to trap our state inside these ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"val"),' functions?"'),o.a.createElement(r.MDXTag,{name:"p",components:n},"By trapping all our pieces of state inside ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"val")," functions,\nwe achieved a very interesting property:\nWe've practically forced ourselfs to have a single source of truth.\nInstead of passing the ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"values of our state")," around, we can now pass a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"references to our state")," around.\nThe benefit of this that it will stop us from accidentally creating redundant copies of our state."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Take for example the following contrived function.\nIt creates a random number generator, which is more likely to generate our lucky number than any other number: "),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"function createNumberGenerator(luckyNumber) {\n    return function numberGenerator() {\n        return Math.random() < 0.5 ? luckyNumber : Math.round(Math.random() * 100)\n    }\n}\n\nlet luckyNumber = 13\nconst generator = createNumberGenerator(luckyNumber)\nconsole.log(generator()) // 13\nconsole.log(generator()) // 50\nconsole.log(generator()) // 49\n\nluckyNumber = 42\nconsole.log(generator()) // 28\nconsole.log(generator()) // 13\nconsole.log(generator()) // 13\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Now at this point, updating our ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber")," variable doesn't get reflected in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"numberGenerator")," anymore.\nWe are forced now to create a new number generator to reflect the change in our preference.\nThe problem is that the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber"),' has been "trapped" as argument to ',o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"createNumberGenerator"),".\nThe argument is basically a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"copy")," of the original ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber")," variable. "),o.a.createElement(r.MDXTag,{name:"p",components:n},"However, it is easy to see that by passing ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"functions")," around, we avoid this whole problem.\nBecause ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber")," itself now becomes a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"const")," reference to the function that traps our lucky number.\n(Yes, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"let")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"var")," really become anti-patterns when using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"rval"),")."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"function createNumberGenerator(luckyNumber) {\n    return function numberGenerator() {\n        // luckyNumber get's evaluated lazily when generating numbers\n        return Math.random() < 0.5 ? luckyNumber() : Math.round(Math.random() * 100)\n    }\n}\n\nconst luckyNumber = val(13) // luckyNumber is a const now!\nconst generator = createNumberGenerator(luckyNumber)\nconsole.log(generator()) // 13\nconsole.log(generator()) // 13\nconsole.log(generator()) // 22\n\nluckyNumber(42) // change our minds\nconsole.log(generator()) // 42\nconsole.log(generator()) // 8\nconsole.log(generator()) // 42\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"By capturing values in functions, it becomes much more explicit when we want to pass a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"reference"),", and when a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"value"),".\nIf we want our number generator to take a one-time snapshot of the state as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber")," we can be explicit about it and ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"explicitly")," pass a copy of the current state ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"createNumberGenerator(luckyNumber())"),".\nOn the other hand, we can also explicitly pass a reference to the state by just passing the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"luckyNumber")," function itself as we did above. "),o.a.createElement(r.MDXTag,{name:"p",components:n},"As it turns out, in many cases it is very intersting to pass around a reference instead of a value.\nEspecially when we are building systems that are supposed to be reactive, such as a user interface.\nBut that for later sections. "),o.a.createElement(r.MDXTag,{name:"hr",components:n}),o.a.createElement(r.MDXTag,{name:"p",components:n},"Note that the essence of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"val")," is simply this: "),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"function val(initial) {\n    let state = initial\n    return function() {\n        if (!arguments.length)\n            return state\n        state = arguments[0]\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"RVal's implementation is a little more involved, but that is because it is possible to subscribe to the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"state")," of a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"val"),".\nBut the above is how you can conceptually think about them. "),o.a.createElement(r.MDXTag,{name:"p",components:n},"But, let's ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://localhost:3000/docs-getting-started"}},"get started"),' with the core "rval" api first!'))}}])&&c(a.prototype,t),m&&c(a,m),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=docs-source-0-introduction-40-philosophy.d61b86e3a14b0f31e0d0.js.map