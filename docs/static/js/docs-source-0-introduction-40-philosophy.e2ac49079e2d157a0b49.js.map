{"version":3,"sources":["webpack:///./docs_source/0_introduction/40_philosophy.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className","href"],"mappings":"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","file":"static/js/docs-source-0-introduction-40-philosophy.fea48fa9.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"the-philosophy-of-rval\"}}>{`The Philosophy of RVal`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Why reactive values? In essence most of our programming work consists of transfering in-memory information from one place to another, transforming the information into new information, that is either human or machine digestable.\nData tranformations always introduces reduces redundant copies of data that need to be kept in sync with the original data.\nIn very trivial example of this problem might look like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const user = {\n    firstName: \"Jane\",\n    lastName: \"Stanford\",\n    fullName: \"Jane Stanford\"\n}\n\ndocument.body.innerHTML = \\`<h1>Hello \\${user.fullName}</h1>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This simple snippet introduces a redundant copy of the original user's name in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullName`}</MDXTag>{` property, and in the DOM.\nNow it has become the programmers responsibility to make sure any futher changes to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` are propagated properly:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function updateFirstName(newName) {\n    user.firstName = newName\n    user.fullName = user.firstName + \" \" + user.lastName\n    document.body.innerHTML = \\`<h1>Hello \\${user.fullName}</h1>\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is the problem that any state management abstraction, regardless the framework or paradigm that is used, is trying to solve.\nRVal introduces a handful of primitives that help you to solve this problem in any context, by automating the question:\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`when`}</MDXTag>{` should `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`which`}</MDXTag>{` transformation be applied?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here is a quick overview in how RVal helps solving that problem.\nFirst, we should recognize that imperatively computing new information, such as the DOM represantation, introduces stale values.\nHowever, we can avoid ever storing such information by storing `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`computations`}</MDXTag>{`, rather than `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`values`}</MDXTag>{`.\nThe process for that is as simple as creating a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`thunk`}</MDXTag>{` (argumentless function) that capture the computation, rather than imperatively producing new values:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const user = {\n    firstName: \"Jane\",\n    lastName: \"Stanford\",\n    fullName: () => user.firstName + \" \" + user.lastName\n}\n\nconst rendering = () => \\`<h1>Hello \\${user.fullName()}</h1>\\`\n\ndocument.body.innerHTML = rendering()\n\nfunction updateFirstName(newName) {\n    user.firstName = newName\n    document.body.innerHTML = rendering()\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We've made things slightly better now; we don't have to imperatively update `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user.fullName`}</MDXTag>{` anymore if the name changes.\nSimilarly, we could captured the rendered representation of the user in the thunk called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rendering`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`By storing computations instead of values, we have reduced the amount of redundant information.\nHowever, we still have to make sure that our changes are propagated, for example by updating the DOM whenever we change the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`firstName`}</MDXTag>{` property.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But, what if we could `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` to our thunks? And thereby avoid the need to manually propagate state changes, and increasing decoupling in the process?\nIn other words, what if we could write something like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const user = { /* as-is */ }\nconst rendering = () => \\`<h1>Hello \\${user.fullName()}</h1>\\`\n\non(rendering, () => {\n    document.body.innerHTML = rendering()\n})\n\nfunction updateFirstName(newName) {\n    user.firstName = newName\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Well, here is the good news: This is exactly the kind of things RVal allows you to write, by introducing three concepts:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`val(value)`}</MDXTag>{` to create pieces of information that can change over time`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`drv(thunk)`}</MDXTag>{` to create thunks that can be subscribed to`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`sub(something, listener)`}</MDXTag>{` to create a listener that fires whenever the provided reactive value or thunk changes`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With those concepts, we can rewrite our above listing as a combination of reactive values and thunks, that propagate the changes when needed!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { val, drv, sub } from \"rval\"\n\nconst user = {\n    firstName: val(\"Jane\"),\n    lastName: val(\"Stanford\"),\n    fullName: drv(() => user.firstName() + \" \" + user.lastName())\n}\n\nconst rendering = drv(\\`<h1>Hello \\${user.fullName()}</h1>\\`)\n\n// subscribe to the 'rendering' thunk\nsub(rendering, () => {\n    document.body.innerHTML = rendering()\n})\n\nfunction updateFirstName(newName) {\n    // change the \\`firstName\\` reactive value to 'newName'\n    // rval will make sure that any derivation and subscription impacted by this\n    // change will be re-evaluated (and nothing more).\n    user.firstName(newName)\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"functions-solidify-state\"}}>{`Functions solidify state`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`At this point you might be wondering:\n\"But `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`why`}</MDXTag>{` is it interesting to trap our state inside these `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{` functions?\"`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`By trapping all our pieces of state inside `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{` functions,\nwe achieved a very interesting property:\nWe've practically forced ourselfs to have a single source of truth.\nInstead of passing the `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`values of our state`}</MDXTag>{` around, we can now pass a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`references to our state`}</MDXTag>{` around.\nThe benefit of this that it will stop us from accidentally creating redundant copies of our state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Take for example the following contrived function.\nIt creates a random number generator, which is more likely to generate our lucky number than any other number: `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function createNumberGenerator(luckyNumber) {\n    return function numberGenerator() {\n        return Math.random() < 0.5 ? luckyNumber : Math.round(Math.random() * 100)\n    }\n}\n\nlet luckyNumber = 13\nconst generator = createNumberGenerator(luckyNumber)\nconsole.log(generator()) // 13\nconsole.log(generator()) // 50\nconsole.log(generator()) // 49\n\nluckyNumber = 42\nconsole.log(generator()) // 28\nconsole.log(generator()) // 13\nconsole.log(generator()) // 13\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now at this point, updating our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` variable doesn't get reflected in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`numberGenerator`}</MDXTag>{` anymore.\nWe are forced now to create a new number generator to reflect the change in our preference.\nThe problem is that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` has been \"trapped\" as argument to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createNumberGenerator`}</MDXTag>{`.\nThe argument is basically a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`copy`}</MDXTag>{` of the original `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` variable. `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, it is easy to see that by passing `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`functions`}</MDXTag>{` around, we avoid this whole problem.\nBecause `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` itself now becomes a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const`}</MDXTag>{` reference to the function that traps our lucky number.\n(Yes, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`let`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`var`}</MDXTag>{` really become anti-patterns when using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rval`}</MDXTag>{`).`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function createNumberGenerator(luckyNumber) {\n    return function numberGenerator() {\n        // luckyNumber get's evaluated lazily when generating numbers\n        return Math.random() < 0.5 ? luckyNumber() : Math.round(Math.random() * 100)\n    }\n}\n\nconst luckyNumber = val(13) // luckyNumber is a const now!\nconst generator = createNumberGenerator(luckyNumber)\nconsole.log(generator()) // 13\nconsole.log(generator()) // 13\nconsole.log(generator()) // 22\n\nluckyNumber(42) // change our minds\nconsole.log(generator()) // 42\nconsole.log(generator()) // 8\nconsole.log(generator()) // 42\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`By capturing values in functions, it becomes much more explicit when we want to pass a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`reference`}</MDXTag>{`, and when a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`value`}</MDXTag>{`.\nIf we want our number generator to take a one-time snapshot of the state as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` we can be explicit about it and `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`explicitly`}</MDXTag>{` pass a copy of the current state `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createNumberGenerator(luckyNumber())`}</MDXTag>{`.\nOn the other hand, we can also explicitly pass a reference to the state by just passing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`luckyNumber`}</MDXTag>{` function itself as we did above. `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As it turns out, in many cases it is very intersting to pass around a reference instead of a value.\nEspecially when we are building systems that are supposed to be reactive, such as a user interface.\nBut that for later sections. `}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that the essence of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{` is simply this: `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function val(initial) {\n    let state = initial\n    return function() {\n        if (!arguments.length)\n            return state\n        state = arguments[0]\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`RVal's implementation is a little more involved, but that is because it is possible to subscribe to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`val`}</MDXTag>{`.\nBut the above is how you can conceptually think about them. `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But, let's `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://localhost:3000/docs-getting-started\"}}>{`get started`}</MDXTag>{` with the core \"rval\" api first!`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}